# Make sure our directory structure exists
mkdir -p "$(pwd)/.direnv/etc" "$(pwd)/.direnv/bin" "$(pwd)/.direnv/bash-completion/completions"

# Set path and environment variables
PATH_add "$(pwd)/.direnv/bin"
PATH_add "$(pwd)/bin"
export KUBECONFIG="$(pwd)/.direnv/etc/kubeconfig"
export TALOSCONFIG="$(pwd)/.direnv/etc/talosconfig"
export XDG_DATA_DIRS="${XDG_DATA_DIRS}:$(pwd)/.direnv"

# Configure git hooks
git config --local core.hooksPath "$(pwd)/.githooks"

# Versions of tools to download
# renovate: datasource=github-tags depName=FiloSottile/age
AGE_VERSION=v1.2.1
# renovate: datasource=github-tags depName=fluxcd/flux2
FLUX_VERSION=v2.6.4
# renovate: datasource=github-tags depName=helm/helm
HELM_VERSION=v3.18.6
# renovate: datasource=github-tags depName=kubernetes/kubernetes
KUBECTL_VERSION=v1.34.0
# renovate: datasource=github-tags depName=atombender/ktail
KTAIL_VERSION=v1.4.0
# renovate: datasource=github-tags depName=getsops/sops
SOPS_VERSION=v3.10.2
# renovate: datasource=github-tags depName=siderolabs/talos
TALOSCTL_VERSION=v1.10.7

# Make sure kubeconfig exists
if [ ! -f ${KUBECONFIG} ]; then
    touch ${KUBECONFIG}
    chmod 0600 ${KUBECONFIG}
fi

# Make sure talosconfig exists
if [ ! -f ${TALOSCONFIG} ]; then
    touch ${TALOSCONFIG}
    chmod 0600 ${TALOSCONFIG}
fi

# Identify architecture
case $(uname -s) in
    Darwin)
        SYSTEM=darwin
	;;
    Linux)
        SYSTEM=linux
	;;
    *)
        echo "Unsupported system type: $(uname -s)"
        exit
        ;;
esac
case $(uname -m) in
    aarch64)
        ARCH=arm64
        ;;
    x86_64)
        ARCH=amd64
        ;;
    *)
        echo "Unsupported cpu architecture type: $(uname -m)"
        exit
        ;;
esac

# Download tools

## age
if [ ! -x "$(pwd)/.direnv/bin/age" ] || [ ! -x "$(pwd)/.direnv/bin/age-keygen" ] || [ "$($(pwd)/.direnv/bin/age --version)" != "${AGE_VERSION}" ] || [ "$($(pwd)/.direnv/bin/age-keygen --version)" != "${AGE_VERSION}" ]; then
    echo -n "Downloading age ${AGE_VERSION}..."
    curl --silent --location https://github.com/FiloSottile/age/releases/download/${AGE_VERSION}/age-${AGE_VERSION}-${SYSTEM}-${ARCH}.tar.gz | tar xzf - --strip-components=1 -C "$(pwd)/.direnv/bin/" age/age age/age-keygen
    chmod 0755 "$(pwd)/.direnv/bin/age" "$(pwd)/.direnv/bin/age-keygen"
    echo " done."
fi

## flux
FLUX_VERSION_NO_V=${FLUX_VERSION#v}
if [ ! -x "$(pwd)/.direnv/bin/flux" ] || [ "$($(pwd)/.direnv/bin/flux --version)" != "flux version ${FLUX_VERSION_NO_V}" ]; then
    echo -n "Downloading flux ${FLUX_VERSION}..."
    curl --silent --location https://github.com/fluxcd/flux2/releases/download/${FLUX_VERSION}/flux_${FLUX_VERSION_NO_V}_${SYSTEM}_${ARCH}.tar.gz | tar xzf - -C "$(pwd)/.direnv/bin/" flux
    chmod 0755 "$(pwd)/.direnv/bin/flux"
    echo " done."
fi
flux completion bash > "$(pwd)/.direnv/bash-completion/completions/flux"

## helm
if [ ! -x "$(pwd)/.direnv/bin/helm" ] || [ "$($(pwd)/.direnv/bin/helm version --short --template '{{.Version}}' 2>/dev/null)" != "${HELM_VERSION}" ]; then
    echo -n "Downloading helm ${HELM_VERSION}..."
    curl --silent --location https://get.helm.sh/helm-${HELM_VERSION}-${SYSTEM}-${ARCH}.tar.gz | tar xzf - --strip-components=1 -C "$(pwd)/.direnv/bin/" ${SYSTEM}-${ARCH}/helm
    chmod 0755 "$(pwd)/.direnv/bin/helm"
    echo " done."
fi
helm completion bash > "$(pwd)/.direnv/bash-completion/completions/helm"

## kubectl
if [ ! -x "$(pwd)/.direnv/bin/kubectl" ] || [ "$($(pwd)/.direnv/bin/kubectl version --client --output=yaml | grep 'gitVersion:' 2>/dev/null)" != "  gitVersion: ${KUBECTL_VERSION}" ]; then
    echo -n "Downloading kubectl ${KUBECTL_VERSION}..."
    curl --silent --location --output "$(pwd)/.direnv/bin/kubectl" https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/${SYSTEM}/${ARCH}/kubectl
    chmod 0755 "$(pwd)/.direnv/bin/kubectl"
    echo " done."
fi
kubectl completion bash > "$(pwd)/.direnv/bash-completion/completions/kubectl"

## ktail
KTAIL_VERSION_NO_V=${KTAIL_VERSION#v}
if [ ! -x "$(pwd)/.direnv/bin/ktail" ]|| [ "$($(pwd)/.direnv/bin/ktail --version)" != "ktail ${KTAIL_VERSION_NO_V}" ]; then
    echo -n "Downloading ktail v${KTAIL_VERSION}..."
    curl --silent --location --output "$(pwd)/.direnv/bin/ktail" https://github.com/atombender/ktail/releases/download/${KTAIL_VERSION}/ktail-${SYSTEM}-${ARCH}
    chmod 0755 "$(pwd)/.direnv/bin/ktail"
    echo " done."
fi

## sops
SOPS_VERSION_NO_V=${SOPS_VERSION#v}
if [ ! -x "$(pwd)/.direnv/bin/sops" ] || [ "$($(pwd)/.direnv/bin/sops --version | sed 's/ (.*//' | head -1)" != "sops ${SOPS_VERSION_NO_V}" ]; then
    echo -n "Downloading sops ${SOPS_VERSION}..."
    curl --silent --output "$(pwd)/.direnv/bin/sops" --location https://github.com/mozilla/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.${SYSTEM}.${ARCH}
    chmod 0755 "$(pwd)/.direnv/bin/sops"
    echo " done."
fi

## talosctl
if [ ! -x "$(pwd)/.direnv/bin/talosctl" ] || [ -z "$($(pwd)/.direnv/bin/talosctl version --client --short | grep "${TALOSCTL_VERSION}\$")" ]; then
    echo -n "Downloading talosctl ${TALOSCTL_VERSION}..."
    curl --silent --location --output "$(pwd)/.direnv/bin/talosctl" https://github.com/siderolabs/talos/releases/download/${TALOSCTL_VERSION}/talosctl-${SYSTEM}-${ARCH}
    chmod 0755 "$(pwd)/.direnv/bin/talosctl"
    echo " done."
fi
talosctl completion bash > "$(pwd)/.direnv/bash-completion/completions/talosctl"

## kubectl-everything plugin
## https://github.com/kubernetes/kubectl/issues/151#issuecomment-851499071
cat << EOP > $(pwd)/.direnv/bin/kubectl-everything
#!${SHELL}
kubectl get --show-kind --ignore-not-found \$(kubectl api-resources --verbs=list --namespaced -o name \$@ | paste -s -d, -) \$@
EOP
chmod 755 "$(pwd)/.direnv/bin/kubectl-everything"
