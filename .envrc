ROOT=$( realpath $( dirname "$( readlink "${BASH_SOURCE[0]}" )" ) )

# Create virtual environment.
if [ ! -f "${ROOT}/venv/bin/activate" ]; then
    echo -n "Creating initial environment..."
    python3 -m venv venv
    echo " done."
fi

# Activate virtual environment.
source ${ROOT}/venv/bin/activate

# Pre-set variables
export KUBECONFIG="${ROOT}/venv/kubeconfig"
export TALOSCONFIG="${ROOT}/venv/talosconfig"
export HELM_CONFIG_HOME="${ROOT}/venv/"
export CT_CONFIG_DIR="${ROOT}/venv/"

export FLUX_VERSION=0.41.1
export HELM_CT_VERSION=3.7.1
export HELM_UNITTEST_VERSION=0.3.0
export HELM_VERSION=v3.11.2
export KUBECTL_VERSION=v1.26.1
export PLUTO_VERSION=5.15.1
export TALOSCTL_VERSION=v1.3.5
export YAMALE_VERSION=4.0.4
export YAMLLINT_VERSION=1.29.0

# Create empty kubeconfig if needed
if [ ! -f ${KUBECONFIG} ]; then
    touch ${KUBECONFIG}
    chmod 0600 ${KUBECONFIG}
fi

# Create empty talosconfig if needed
if [ ! -f ${TALOSCONFIG} ]; then
    touch ${TALOSCONFIG}
    chmod 0600 ${TALOSCONFIG}
fi

# Fetch kubectl
if [ ! -x "${ROOT}/venv/bin/kubectl" ] || [ "$(${ROOT}/venv/bin/kubectl version --client --output=yaml | grep 'gitVersion:' 2>/dev/null)" != "  gitVersion: ${KUBECTL_VERSION}" ]; then
    echo -n "Downloading kubectl ${KUBECTL_VERSION}..."
    curl --silent --location --output "${ROOT}/venv/bin/kubectl" https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
    chmod 0755 "${ROOT}/venv/bin/kubectl"
    echo " done."
fi

# Fetch flux
if [ ! -x "${ROOT}/venv/bin/flux" ] || [ "$(${ROOT}/venv/bin/flux --version)" != "flux version ${FLUX_VERSION}" ]; then
    echo -n "Downloading flux ${FLUX_VERSION}..."
    curl --silent --location https://github.com/fluxcd/flux2/releases/download/v${FLUX_VERSION}/flux_${FLUX_VERSION}_linux_amd64.tar.gz | tar xzf - -C "${ROOT}/venv/bin/" flux
    chmod 0755 "${ROOT}/venv/bin/flux"
    echo " done."
fi

# Fetch talosctl
if [ ! -x "${ROOT}/venv/bin/talosctl" ] || [ -z "$(${ROOT}/venv/bin/talosctl version --client --short | grep "${TALOSCTL_VERSION}\$")" ]; then
    echo -n "Downloading talosctl ${TALOSCTL_VERSION}..."
    curl --silent --location --output "${ROOT}/venv/bin/talosctl" https://github.com/siderolabs/talos/releases/download/${TALOSCTL_VERSION}/talosctl-linux-amd64
    chmod 0755 "${ROOT}/venv/bin/talosctl"
    echo " done."
fi

# Fetch helm
if [ ! -x "${ROOT}/venv/bin/helm" ] || [ "$(${ROOT}/venv/bin/helm version --short --template '{{.Version}}' 2>/dev/null)" != "${HELM_VERSION}" ]; then
    echo -n "Downloading helm ${HELM_VERSION}..."
    curl --silent --location https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar xzf - --strip-components=1 -C "${ROOT}/venv/bin/" linux-amd64/helm
    chmod 0755 "${ROOT}/venv/bin/helm"
    echo " done."
fi

# Fetch helm plugin unittest
${ROOT}/venv/bin/helm plugin list | grep --silent "^unittest\s*${HELM_UNITTEST_VERSION}\s"
if [ $? -ne 0 ]; then
    echo -n "Installing helm plugin unittest ${HELM_UNITTEST_VERSION}..."
    ${ROOT}/venv/bin/helm plugin uninstall unittest >/dev/null 2>&1 || true
    ${ROOT}/venv/bin/helm plugin install --version ${HELM_UNITTEST_VERSION} https://github.com/helm-unittest/helm-unittest >/dev/null
    echo " done."
fi

# Fetch helm chart-testing
if [ ! -x "${ROOT}/venv/bin/ct" ] || [ "$(${ROOT}/venv/bin/ct version | grep ^Version: | sed 's/.*\s//')" != "v${HELM_CT_VERSION}" ]; then
    echo -n "Downloading helm ct ${HELM_CT_VERSION}..."
    curl --silent --location https://github.com/helm/chart-testing/releases/download/v${HELM_CT_VERSION}/chart-testing_${HELM_CT_VERSION}_linux_amd64.tar.gz | tar xzf - -C "${ROOT}/venv/bin/" ct
    chmod 0755 "${ROOT}/venv/bin/ct"
    curl --silent --location --output "${ROOT}/venv/chart_schema.yaml" https://github.com/helm/chart-testing/raw/v${HELM_CT_VERSION}/etc/chart_schema.yaml
    curl --silent --location --output "${ROOT}/venv/lintconf.yaml" https://github.com/helm/chart-testing/raw/v${HELM_CT_VERSION}/etc/lintconf.yaml
    echo " done."
fi

# Fetch pluto
if [ ! -x "${ROOT}/venv/bin/pluto" ] || [ "$(${ROOT}/venv/bin/pluto version | awk '{print($1)}')" != "Version:${PLUTO_VERSION}" ]; then
    echo -n "Downloading pluto ${PLUTO_VERSION}..."
    curl --silent --location https://github.com/FairwindsOps/pluto/releases/download/v${PLUTO_VERSION}/pluto_${PLUTO_VERSION}_linux_amd64.tar.gz | tar xzf - -C "${ROOT}/venv/bin/" pluto
    chmod 0755 "${ROOT}/venv/bin/pluto"
    echo " done."
fi

# Create chart-testing config
cat > ${ROOT}/venv/ct.yaml << EOF
remote: origin
target-branch: main
chart-yaml-schema: venv/chart_schema.yaml
lint-conf: venv/lintconf.yaml
EOF

# Generate requirements file and install packages
cat > ${ROOT}/venv/requirements.txt << EOF
yamale==${YAMALE_VERSION}
yamllint==${YAMLLINT_VERSION}
EOF
${ROOT}/venv/bin/pip install --quiet --requirement ${ROOT}/venv/requirements.txt
